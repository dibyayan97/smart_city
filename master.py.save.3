#from path_img import *
#from communication import * 
#from test_fn_i2c_call import *
from path_planning_new import *
from Pi_comms_test import *

flag=0
edge_no_1 = [1,2]
edge_no_2 = [4,3]
edge_no_3 = [1,2]
edge_no_4 = [7,6]
bot_no = 1
graph =[]

source_1=0
source_2=0
source_3=0
previous_1=0
previous_2=0
previous_3=0

#apt_add=0x05
#hos_add=0x06
#mal_add=0x07
#scho_add=0x08

addresses = [0x05,0x06,0x07,0x08]
replies=[]

def ping_blds():
    for add in addresses :
        replies.append(read_info(add))
        time.sleep(0.1)
	

def adj_matrix():
	global graph, previous_1, previous_2, previous_3, source_1, source_2, source_3
	graph = [[0,3,0,3,1,0,0,0],
            [3,0,3,0,0,1,0,0],
            [0,3,0,3,0,0,1,0],
            [3,0,3,0,0,0,0,1],
            [1,0,0,0,0,1,0,1],
            [0,1,0,0,1,0,1,0],
            [0,0,1,0,0,1,0,1],
            [0,0,0,1,1,0,1,0]]
	stored_graph=copy.deepcopy(graph)
	previous_1 = 3
	previous_2 = 3
	previous_3 = 1

	source_1 = 4
	source_2 = 2
	source_3 = 2  

def bot1_call(edge_no):
	global source_1, previous_1, graph
	b, source_1, previous_1, graph = path_planning(edge_no, 1, source_1, previous_1, graph)
	return b

def bot2_call(edge_no):
        global  source_2, previous_2, graph                               
        b, source_2, previous_2, graph = path_planning(edge_no, 2, source_2, previous_2, graph)
        return b

def bot3_call(edge_no):
        global source_3, previous_3, graph                               
        b, source_3, previous_3, graph = path_planning(edge_no, 3, source_3, previous_3, graph)
        return b


#while flag < 10:
#if flag<1:"
adj_matrix()

b = bot1_call(edge_no_1)
print b
clear_path(1, graph)


for add in addresses : 
	replies.append(read_info(add))
	time.sleep(0.1)
	

	#b = path_planning(4,1,3) #func(dest,prev node,bot number)
	#instruction(b)

#write_info(0x04,string) #address of house
